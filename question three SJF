import simpy
import random
import numpy as np
import matplotlib.pyplot as plt

lambdaa = 1.5
mu = 2
time = 1000
waitingtime = []
#We will use different values of mu lambdaa to get different values of rho to study the stability
def customerprocessing_sjf(env, clientnumber, server):
    arrival_time = env.now
    service_time = random.expovariate(mu) 

    with server.request(priority=service_time) as request:
        yield request
        wait_time = env.now - arrival_time
        waitingtime.append(wait_time)

        yield env.timeout(service_time)

def simulation_sjf():
    global waitingtime
    waitingtime = []

    env = simpy.Environment()
    server = simpy.PriorityResource(env, capacity=1)

    for i in range(1, 60):  # Simulate 60 customers
        env.process(customerprocessing_sjf(env, i, server))

    env.run(until=time)

    return np.mean(waitingtime)

def simulation_complex_sjf(itermax=500):
    all_wait_times = []

    for _ in range(itermax):
        avg_wait_time = simulation_sjf()  
        all_wait_times.append(avg_wait_time)

    mean_waiting_time = np.mean(all_wait_times)
    std_dev = np.std(all_wait_times)

    return mean_waiting_time, std_dev

mean_waiting_time, std_dev = simulation_complex_sjf(500)


print("Average waiting time for M/M/1 with Shortest Job First (SJF) after 500 iterations:",{mean_waiting_time}, "Â±", {std_dev})
